@startuml

HexGrid --> HexTile : Contains
HexGrid --> Settings : Contains
HexGrid --> GridPlayer : Contains
HexTile --> GridPlayer : Owned By
GridPlayer --> HexTile : Owns
GridPlayer --|> Player : Inheritance
GridPlayer --|> Enemy : Inheritance
Player --> Upgrades : Contains

HexTile --|> Grass : Inheritance
HexTile --|> Water : Inheritance
HexTile --|> Mountain : Inheritance
HexTile --|> Desert : Inheritance
HexTile --|> Forest : Inheritance
HexTile --|> Snow : Inheritance
HexTile --|> City : Inheritance
HexTile --|> Treasure : Inheritance

ResourceManager --> CashGeneration : Contains
ResourceManager --> PopulationGeneration : Contains

class HexGrid
{
    +Settings settings;
    +HexTile[] tilePrefabs;
    +List<HexTile> tiles;

    +void Awake()
    +void Update()
    +void CreateGrid(int N)
    +void AddEnemies(int amount)
}

class HexTile
{
    +int q;
    +int r;
    +int cost;
    +string typeName;
    +bool traversable;
    +Color color;
    +Color originalColor;
    +Vector3 originalScale;
    +List<HexTile> neighbors;
    +GridPlayer owner;

    +void InitTile(int Q, int R)
    +void Start()
    +void Update()
    +void SetOwner(GriPlayer player, HexTile previousTile)
    +void OnMouseEnter()
    +void OnMouseExit()
    +void OnMouseDown()
    +bool EligibleForPurchase()
    -List<HexTile> GetNeighbors(List<HexTile> allTiles)
}

class Grass
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Grass()
}

class Water
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Water()
}

class Mountain
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Mountain()
}

class Desert
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Desert()
}

class Forest
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Forest()
}

class Snow
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Snow()
}

class City
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +City()
}

class Treasure
{
    -string tileName;
    -int tileCost
    -bool isTraversable;

    +Treasure()
}

class GridPlayer
{
    +abstract string playerTypeName;
    +Color color;
    +HexTile ownedTilePrefab;
    +HexGrid grid;
    +List<HexTile> ownedTiles;
    +Settings settings;

    -virtual void Start()
    -virtual void Update()
    +abstract void StartPlayer()
    +abstract void UpdatePlayer()

    +void CheckAndAddCell(HexTile tile)
    +CanAddCell(HexTile tile)
    +void AddCell(HexTile tile)
}

class Player
{
    +override string playerTypeName;
    +int money;
    +int population;
    +int military;
    +int happiness;
    +CameraController playerCamera;
    +LayerMask hexCellLayerMask;

    +override void StartPlayer()
    +override void UpdatePlayer()
    -void HighlightNeighbors()
    +void RemoveHighlights()
}

class Enemy
{
    +override string playerTypeName;
    +float enemyTurnTime;

    +override void StartPlayer()
    +override void UpdatePlayer()
    -IEnumerator EnemyTurn()
    +void TakeTile()
}

Class Settings
{
    +int mapSizeFromCenter;
    +float waveAmount;
    +float waveHeight;
    +float waveSpeed;
}

class Upgrades
{
    +string MilitaryPerk
    +string EconomicPerk
    +string HappinessPerk

    +void MIlitaryPerk()
    +Void EconomicPerk()
    +Void HappinessPerk()
}

class TextManager
{
    +Text moneyText;
    +Text populationText;
    +Text militaryText;
    +Text happinessText;
    +Player player;

    +void Update()
}

class ResourceManager
{

}

class CashGeneration
{

}

class PopulationGeneration
{

}

class CameraController
{
    +float moveSpeed;
    -bool isDragging;
    -Vector3 dragStartPosition;

    +void Update()
    +void FindPlayer(Player player)
    -void MoveMouse()
    -void MoveWASD()
}

@enduml